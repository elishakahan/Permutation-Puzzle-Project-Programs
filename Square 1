{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyN4+vn6wysTFwK9e5PAHWmW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1VGWfQcDQEj5Wgcmz8z62x4xf0ziLKHqE"},"id":"bVotkdxk1lko","executionInfo":{"status":"ok","timestamp":1662942697077,"user_tz":240,"elapsed":32941,"user":{"displayName":"Elisha Kahan","userId":"14516294618190663936"}},"outputId":"aa691a2a-a6f4-4026-cb36-fe49663384f3"},"source":["import matplotlib.pyplot as plt\n","from matplotlib.patches import Wedge\n","\n","# Generate all possible Cubeshapes of the Square-1 (we can actually draw them!)\n","\n","# Position of the original Square-1 in terms of corners and edges\n","origGen = [[[2, 1, 2, 1, 2, 1, 2, 1], \n","           [1, 2, 1, 2, 1, 2, 1, 2]]]\n","\n","# Finds slice index at current position\n","def findSlice(layer):\n","  sumLayer = count = 0\n","  for count in range(len(layer)):\n","    sumLayer += layer[count]\n","    if sumLayer == 6:\n","      return count\n","  return False\n","\n","# Transforms the Square-1 by slicing it \n","def slice(squ):\n","  finSqu = []\n","  up = findSlice(squ[0])\n","  down = findSlice(squ[1])\n","  if up != False and down != False:\n","    finSqu.append(squ[0][:up + 1] + squ[1][down + 1:])\n","    finSqu.append(squ[1][:down + 1] + squ[0][up + 1:])\n","    return finSqu\n","  else:\n","    return False\n","\n","# Finds different rotations of a layer\n","def findRotsDif(layer):\n","  rots = []\n","  for i in range(len(layer)):\n","    rot = layer[i:] + layer[:i]\n","    if rot not in rots:\n","      rots.append(rot)\n","  return rots\n","\n","# Find rotations of a layer suitable for slicing\n","def findRots(layer):\n","  origRots = findRotsDif(layer)\n","  rots = [rot for rot in origRots if findSlice(rot)!= False]\n","  return rots\n","\n","# Determines if two Square-1 have the same Cubeshape\n","def isSimilar(squ1, squ2):\n","  up = findRotsDif(squ2[0])\n","  down = findRotsDif(squ2[1])\n","  if squ1[0] in up and squ1[1] in down:\n","    return True\n","  else:\n","    return False\n","\n","# Throws out similar Square-1's in a list of Square-1's\n","def sort(squs):\n","  index = 0\n","  while index < len(squs) - 1:\n","    helper = []\n","    for squ in squs[index + 1: ]:\n","      if isSimilar(squ, squs[index]):\n","        squs.remove(squ)\n","    index += 1\n","\n","      \n","  return squs\n","\n","\n","# Recursive function to find all possible Cubeshapes given a current and an old generation of Cubeshapes\n","# If we start with the cube Cubeshape, and recursively run the algorthim, we can see how many slices it takes to solve each CubeShape\n","def genMaker(oldGen, nowGen):\n","  expFutGen = []\n","  checkGen = oldGen + nowGen\n","  for i in nowGen:\n","    up = findRots(i[0])\n","    down = findRots(i[1])\n","    miniFutGen = [slice([u, d]) for u in up for d in down]\n","    miniFutGen = [squ for squ in miniFutGen if all([not isSimilar(squ, check) for check in checkGen])]\n","    expFutGen += miniFutGen \n","  futGen = sort(expFutGen)\n","  return futGen\n","\n","# Draw a Square-1\n","def draw(squ):\n","  fig, ax = plt.subplots(figsize=(8, 4))\n","  ax.set_xlim(-2, 2)\n","  ax.set_ylim(-1, 1)\n","\n","  # Draw Top (Facing Top)\n","  baseTheta = -120\n","  nextTheta = -120\n","  for i in range(len(squ[0])):\n","    nextTheta -= squ[0][i] * 30\n","    ax.add_patch(Wedge((-1, 0), r=1, theta1=baseTheta, theta2=nextTheta, ec='b', fill=None))\n","    baseTheta -= squ[0][i] * 30\n","\n","  # Draw Bottom (Facing Bottom)\n","  baseTheta = -120\n","  nextTheta = -120\n","  for i in range(len(squ[1])):\n","    nextTheta -= squ[1][i] * 30\n","    ax.add_patch(Wedge((1, 0), r=1, theta1=baseTheta, theta2=nextTheta, ec='b', fill=None))\n","    baseTheta -= squ[1][i] * 30\n","\n","  plt.plot([-1.5, -0.5], [-0.87, 0.87], color='black')\n","  plt.plot([0.5, 1.5], [-0.87, 0.87], color='black')\n","  plt.show()\n","\n","# Initialize\n","oldGen = []\n","nowGen = origGen\n","print(str(0) + \": \" + str(nowGen))\n","for squ in nowGen:\n","    draw(squ)\n","\n","# Grow Genererations \n","# The maximum number of generations is 7\n","# The number of Cubeshapes is 170\n","# We can draw all the Cubeshapes\n","count = 1\n","for i in range(7):\n","  newGen = genMaker(oldGen, nowGen)\n","  print(str(i + 1) + \": \" + str(newGen))\n","  for squ in newGen:\n","    draw(squ)\n","  count += len(newGen)\n","\n","  oldGen = nowGen\n","  nowGen = newGen\n","\n"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}