{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"41iJZs058jmb","executionInfo":{"status":"ok","timestamp":1662943202259,"user_tz":240,"elapsed":229,"user":{"displayName":"Elisha Kahan","userId":"14516294618190663936"}},"colab":{"base_uri":"https://localhost:8080/","height":0},"outputId":"7ba5b799-d31f-4b50-d2a2-727b0f89dc5d"},"source":["import numpy as np\n","import random\n","import copy\n","\n","# Scramble Clock!\n","\n","corners = [ [row, col] for row in [0,2] for col in [0,2] ] # The corners are the same peices on the the front and the back.\n","\n","# Stores components of \"moves\"\n","helperDict = {\n","    0: [ [row, col] for row in [0,1] for col in [0,1] ], # Pieces involved when the top left button is pushed up\n","    1: [ [row, col] for row in [0,1] for col in [1,2] ], # Pieces involved when the top right button is pushed up\n","    2: [ [row, col] for row in [1,2] for col in [0,1] ], # Pieces involved when the bottom left button is pushed up\n","    3: [ [row, col] for row in [1,2] for col in [1,2] ], # Pieces involved when the bottom right button is pushed up\n","}\n","\n","# Maps a number from 0 to 12 to -6 to 6\n","def minus(num):\n","  if num > 6:\n","    return num - 12\n","  else:\n","    return num\n","\n","# Finds coordinates of clocklets affected by a move\n","def buttonToGear(buttonArray, face):\n","  if face == 0:\n","    gear = [x for i in range(4) for x in helperDict[i] if buttonArray[i] == 1]\n","    realGear = []\n","    [realGear.append(x) for x in gear if x not in realGear]\n","    return realGear\n","  else:\n","    # Applies the rules but to the backside of the clock\n","    newButtonArray = [(1-button) for button in buttonArray]\n","    return buttonToGear(newButtonArray, 0)\n","\n","# Takes the clocklet values and mods them base 12\n","def adjust(clock):\n","  for face in range(2):\n","    for row in range(3):\n","      for clocklet in range(3):\n","        clock[face][row][clocklet] = int(clock[face][row][clocklet]) % 12\n","     \n","# Mirrors and adjusts the clock so it represents a normal clock\n","def mirror(clock):\n","  for i in range(3):\n","    for j in range(3):\n","      clock[1][i][j] = (clock[1][i][j] * (-1)) % 12\n","      clock[0][i][j] = clock[0][i][j] % 12\n","      for k in range(2):\n","        if clock[k][i][j] == 0:\n","          clock[k][i][j] = 12\n","  clock[1] = np.fliplr(clock[1])\n","  return clock\n","\n","# Performs a move on the clock\n","def move(clock, buttonArray, face, n):\n","  gear = buttonToGear(buttonArray, face)\n","  for j in gear:\n","    clock[face][j[0]][j[1]] = clock[face][j[0]][j[1]] + n\n","    if j in corners:\n","      clock[1-face][j[0]][j[1]] = clock[1-face][j[0]][j[1]] + n\n","  return clock\n","\n","spec = {\n","  \"UR\"  : [0, 1, 0, 0],\n","  \"DR\"  : [0, 0, 0, 1],\n","  \"DL\"  : [0, 0, 1, 0],\n","  \"UL\"  : [1, 0, 0, 0],\n","  \"U\"   : [1, 1, 0, 0],\n","  \"R\"   : [0, 1, 0, 1],\n","  \"D\"   : [0, 0, 1, 1],\n","  \"L\"   : [1, 0, 1, 0],\n","  \"ALL\" : [1, 1, 1, 1],\n","}\n","\n","flipSpec = {\n","  \"U\"   : [0, 0, 1, 1],\n","  \"R\"   : [0, 1, 0, 1],\n","  \"D\"   : [1, 1, 0, 0],\n","  \"L\"   : [1, 0, 1, 0],\n","  \"All\" : [0, 0, 0, 0],\n","}\n","\n","buttons = [\"UR\", \"DR\", \"DL\", \"UL\" ]\n","\n","def scram():\n","  clock = np.zeros( (2,3,3), dtype=np.int8 ) # Initialize clock with two three by three sides.\n","  for key in spec:\n","    num = random.randrange(0,12)\n","    print(key + str(minus(num)), end=\" \")\n","    move(clock, spec[key], 0, num)\n","\n","  print(\"y2\", end =\" \")\n","  for key in flipSpec:\n","    num2 = random.randrange(0,12)\n","    print(key + str(minus(num2)), end=\" \")\n","    num2 = 12 - num2\n","    move(clock, flipSpec[key], 1, num2)\n","\n","  for i in range(4):\n","    num3 = random.randrange(0,2)\n","    if num3 == 1:\n","      print(buttons[i], end=\" \")\n","  print(\"\\n\")\n","\n","  mirror(clock)\n","  print(clock)\n","  print(\"\\n\")\n","  return clock\n","\n","scramClock = scram()"],"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["UR3 DR2 DL0 UL4 U6 R6 D-3 L5 ALL-3 y2 U6 R4 D-1 L5 All2 DR DL UL \n","\n","[[[12  9 11]\n","  [ 9  8 11]\n","  [ 6  7  8]]\n","\n"," [[ 1  5 12]\n","  [12  4 11]\n","  [ 4 10  6]]]\n","\n","\n"]}]},{"cell_type":"code","source":["# Currently in progress\n","\n","# Solve the clock using a given set of independent moves\n","\n","# This function converts a list of front and back moves to a \"toggle matrix\"\n","def toggleMatrix(fMoves, bMoves):\n","  coordinateClock = [[[1, 2, 3], \n","                      [4, 5, 6], \n","                      [7, 8, 9]],\n","                     [[3, 10, 1], \n","                      [11, 12, 13], \n","                      [9, 14, 7]]]\n","  corners = [1, 3, 7, 9]\n","  # These dictionaries give moves in terms of their button arrays\n","  moveDict =  {\n","  \"UR\"  : [0, 1, 0, 0],\n","  \"DR\"  : [0, 0, 0, 1],\n","  \"DL\"  : [0, 0, 1, 0],\n","  \"UL\"  : [1, 0, 0, 0],\n","  \"U\"   : [1, 1, 0, 0],\n","  \"R\"   : [0, 1, 0, 1],\n","  \"D\"   : [0, 0, 1, 1],\n","  \"L\"   : [1, 0, 1, 0],\n","  \"ur\"  : [1, 0, 1, 1],\n","  \"dr\"  : [1, 1, 1, 0],\n","  \"dl\"  : [1, 1, 0, 1],\n","  \"ul\"  : [0, 1, 1, 1],\n","  \"S\"   : [1, 0, 0, 1],\n","  \"H\"   : [0, 1, 1, 0],\n","  \"ALL\" : [1, 1, 1, 1],\n","  }\n","\n","  matrix = []\n","  for fMove in fMoves:\n","    coordinates = buttonToGear(moveDict[fMove], 0)\n","    linearCoordinates = [coordinateClock[0][coordinate[0]][coordinate[1]] for coordinate in coordinates]\n","    toggleVect = [1 if i in linearCoordinates else 0 for i in range(1, 15) ]\n","    matrix.append(toggleVect)\n","\n","  for bMove in bMoves:\n","    coordinates = buttonToGear(moveDict[bMove], 0)\n","    linearCoordinates = [coordinateClock[1][coordinate[0]][coordinate[1]] for coordinate in coordinates]\n","    toggleVect = []\n","    for i in range(1, 15):\n","      if i in linearCoordinates:\n","        if i in corners:\n","          toggleVect.append(-1)\n","        else:\n","          toggleVect.append(1)\n","      else:\n","        toggleVect.append(0)\n","    matrix.append(toggleVect)  \n","\n","  return np.transpose(matrix)  \n","\n","def solve(clock, toggleMatrix):\n","  linearClock = [clock[0][j][i] for j in range(3) for i in range(3)] + \\\n","                [clock[1][0][1], clock[1][1][0], clock[1][1][1], clock[1][1][2], clock[1][2][1]]\n","  solutionVect = np.linalg.solve(toggleMatrix, linearClock)\n","  realSolution = [int(minus((value * -1) % 12)) for value in solutionVect]\n","\n","  for i, fMove in enumerate(fMoves):\n","    print(fMove + str(realSolution[i]), end=\" \")\n","  print(\"y2\", end=\" \")\n","  for i, bMove in enumerate(bMoves):\n","    print(bMove + str(realSolution[len(fMoves) + i]), end=\" \")\n","  return realSolution\n","\n","# Solve The Clock Using these Moves\n","fMoves = ['UR', 'DR', 'DL', 'UL', 'U', 'R', 'D', 'L', 'ALL']\n","bMoves = ['U', 'R', 'D', 'L', 'ALL']\n","toggleMatrix = toggleMatrix(fMoves, bMoves)\n","solutionVector = solve(scramClock, toggleMatrix)\n"],"metadata":{"id":"c73_EY9I_TX0","executionInfo":{"status":"ok","timestamp":1662943205641,"user_tz":240,"elapsed":189,"user":{"displayName":"Elisha Kahan","userId":"14516294618190663936"}},"outputId":"256f66a0-54cf-48bf-9a60-b08c232bb570","colab":{"base_uri":"https://localhost:8080/","height":0}},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["UR-3 DR-2 DL0 UL-4 U-5 R6 D3 L-4 ALL2 y2 U-5 R-3 D1 L-4 ALL-2 "]}]}]}